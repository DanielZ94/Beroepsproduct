import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

public class KeybarricadeMainFrame extends JFrame {

    //frame
    private static final String TITLE = "Test";
    private static final int FRAME_WIDTH = 500;
    private static final int FRAME_HEIGHT = 500;
    public int[][] fieldSize = {
            {3, 1, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 1, 0, 0, 0, 1, 1, 1, 1, 0},
            {0, 1, 0, 0, 0, 1, 0, 0, 1, 0},
            {0, 1, 0, 1, 1, 1, 0, 0, 1, 0},
            {0, 1, 0, 0, 0, 1, 0, 0, 1, 0},
            {0, 1, 1, 1, 0, 1, 0, 0, 1, 0},
            {0, 1, 1, 1, 0, 1, 0, 0, 1, 0},
            {0, 1, 1, 1, 0, 1, 0, 0, 1, 0},
            {0, 1, 1, 1, 0, 1, 0, 0, 1, 0},
            {0, 0, 0, 0, 0, 1, 0, 0, 1, 0}
    };

    //field
    private boolean isRuning = true;
    public JPanel field;
    protected JPanel fieldGrid;

    //underPanel
    private JPanel underPanel;
    private Long start = System.currentTimeMillis();

    //ImageIcons
    protected ImageIcon grass = new ImageIcon("C:\\Users\\Joost\\IdeaProjects\\SleutelBarricadeSpel\\src\\tiles\\grass.png");
    protected ImageIcon wall = new ImageIcon("C:\\Users\\Joost\\IdeaProjects\\SleutelBarricadeSpel\\src\\tiles\\wall2.png");
    private ImageIcon player = new ImageIcon("C:\\\\Users\\\\Joost\\\\IdeaProjects\\SleutelBarricadeSpel\\\\src\\\\tiles\\\\player.png");

    public KeybarricadeMainFrame() {

        //frame
        JFrame frame = new JFrame();
        frame.setTitle(TITLE);
        frame.setSize(FRAME_WIDTH, FRAME_HEIGHT);

        //underPanel
        JLabel timelbl = new JLabel();
        underPanel = new JPanel();
        underPanel.setBackground(Color.WHITE);
        underPanel.add(timelbl);

        //grid
        fieldGrid = new JPanel();
        fieldGrid.setLayout(new GridLayout(10,10));
        fieldGrid.setBackground(Color.LIGHT_GRAY);

        //field
        field = new JPanel();
        field.setLayout(new BorderLayout());
        field.setBackground(Color.LIGHT_GRAY);
        field.add(fieldGrid, BorderLayout.CENTER);

        //draws everything
        drawGrid();
        //addPlayer();
        frame.add(field, BorderLayout.CENTER);
        frame.add(underPanel, BorderLayout.SOUTH);
        frame.addKeyListener(listener);

        frame.setResizable(false);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);

        while (isRuning) { //timer system

            Long end = System.currentTimeMillis();
            long time = (end - start) / 1000;
            String time2 = String.valueOf(time);
            try {
                timelbl.setText(time2);
                Thread.sleep(1000);
            } catch (Exception e) {
                System.out.println("error");
            }
        }
    }

    public void drawGrid() { //method to draw the grid
        fieldGrid.removeAll();

        for (int x = 0; x < fieldSize.length; x++) {
            for (int y = 0; y < fieldSize[x].length; y++) {
                if (fieldSize[x][y] == 0) {
                    fieldGrid.add(new JLabel(grass));
                }

                if (fieldSize[x][y] == 1) {
                    fieldGrid.add(new JLabel(wall));
                }

                if (fieldSize[x][y] == 3) {
                    
                    fieldGrid.add(new JLabel(player));
                }
            }
            fieldGrid.revalidate();
        }
    }

    KeyListener listener = new KeyListener() { //method to move the player
        int rows = 0;
        int columns = 0;


        @Override
        public void keyTyped(KeyEvent e) {
            //no code here
        }


        @Override
        public void keyPressed(KeyEvent e) {



            if (e.getKeyCode() == KeyEvent.VK_LEFT) {
                if (columns > 0 && fieldSize[rows][columns-1] == 0) {
                    fieldSize[rows][columns] = 0;
                    columns--;
                    fieldSize[rows][columns] = 3;
                    System.out.println(rows + ", " + columns);
                    drawGrid();
                } else {
                    System.out.println("je kan niet verder");
                }
            }

            if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
                if (columns < 9 && fieldSize[rows][columns+1] == 0) {
                    fieldSize[rows][columns] = 0;
                    columns++;
                    fieldSize[rows][columns] = 3;
                    System.out.println(rows + ", " + columns);
                    drawGrid();
                } else {
                    System.out.println("je kan niet verder");
                }
            }

            if (e.getKeyCode() == KeyEvent.VK_UP) {
                if (rows > 0 && fieldSize[rows-1][columns] == 0) {
                    fieldSize[rows][columns] = 0;
                    rows--;
                    fieldSize[rows][columns] = 3;
                    System.out.println(rows + ", " + columns);
                    drawGrid();
                } else {
                    System.out.println("je kan niet verder");
                }
            }

            if (e.getKeyCode() == KeyEvent.VK_DOWN) {
                if (rows < 9 && fieldSize[rows+1][columns] == 0) {
                    fieldSize[rows][columns] = 0;
                    rows++;
                    fieldSize[rows][columns] = 3;
                    System.out.println(rows + ", " + columns);
                    drawGrid();
                } else {
                    System.out.println("je kan niet verder");
                }
            }

            if (fieldSize[9][9] == 3) {
                JOptionPane.showMessageDialog(field, "je hebt gewonnen!");

            }
        }

        @Override
        public void keyReleased(KeyEvent e) {
            //no code here
        }
    };
}
